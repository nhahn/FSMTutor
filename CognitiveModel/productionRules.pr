(require* wmeTypes "wmeTypes.clp")



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  This file contains some Jess / CTAT production rules for the Mendel Backwards Problem Solving Tutor
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;--------------------------------------------------------------------------------------------
;; Functions
;;

(defrule create-state
    ?prob <- (problem (count-state ?cs)(total-state ?ts)(ie-states $? ?ie $?)(curr-states $?curr-s)(subGoal ?g&:(eq ?g nil)))
    (test (< ?cs ?ts))
    ?ie <- (interface-element (name ?sel)(value nil))
    (test (eq (member$ ?sel ?curr-s) FALSE))
    	=>
    (predict ?sel UpdateText createState)
    (modify ?prob (count-state (+ ?cs 1))(curr-states (create$ ?curr-s ?sel)))
	(construct-message
    "[ Is there anything else the interactor can do? ]"
    "[ Create a new state ]"
    ))

(defrule create-transition-1
    (declare (salience 10))  
    ?prob <- (problem (ie-states $? ?ie1 $?)(curr-transitions $?ct)(subGoal ?g&:(eq ?g nil)))
    ?prob <- (problem (ie-states $? ?ie2 $?))
    (test (neq ?ie1 ?ie2))
    ?ie1 <- (interface-element (name ?sel1))
    ?ie2 <- (interface-element (name ?sel2))
    ?sp1 <- (state-pair (real-state ?rs1)(student-state ?sel1))
    ?sp2 <- (state-pair (real-state ?rs2)(student-state ?sel2))
    ?tr <- (transition (prev-state ?rs1)(next-state ?rs2))
    	=>
    (predict ?sel1 UpdateList ?sel2)
    (bind ?t (assert (transition (prev-state ?sel1)(next-state ?sel2))))
    (modify ?prob (curr-transitions (create$ ?ct ?t))(subGoal fill-ev-ac))
    (construct-message
    "[ What events can happen in this state? ]"
    "[ Create a transition from state" ?sel1 " to " ?sel2 ". ]"
    ))

(defrule create-transition-2
    (declare (salience 10))  
    ?prob <- (problem (ie-states $? ?ie1 $?)(curr-transitions $?ct)(subGoal ?g&:(eq ?g nil)))
    ?prob <- (problem (ie-states $? ?ie2 $?))
    (test (neq ?ie1 ?ie2))
    ?ie1 <- (interface-element (name ?sel1))
    ?ie2 <- (interface-element (name ?sel2))
    ?sp1 <- (state-pair (real-state ?rs1)(student-state ?sel1))
    (not (state-pair (real-state ?rs2)(student-state ?sel2)))
    ?tr <- (transition (prev-state ?rs1)(next-state ?ns))
    ?spc <- (state-pair (real-state ?ns)(student-state ?ss&:(eq ?ss nil)))
    	=>
    (predict ?sel1 UpdateList ?sel2)
    (bind ?t (assert (transition (prev-state ?sel1)(next-state ?sel2))))
    (modify ?prob (curr-transitions (create$ ?ct ?t))(subGoal fill-ev-ac))    
    (construct-message
    "[ What events can happen in this state? ]"
    "[ Create a transition from state" ?sel1 " to " ?sel2 ". ]"
    ))

(defrule create-transition-3
    (declare (salience 10))  
    ?prob <- (problem (ie-states $? ?ie1 $?)(curr-transitions $?ct)(subGoal ?g&:(eq ?g nil)))
    ?prob <- (problem (ie-states $? ?ie2 $?))
    (test (neq ?ie1 ?ie2))
    ?ie1 <- (interface-element (name ?sel1))
    ?ie2 <- (interface-element (name ?sel2))
    ?sp2 <- (state-pair (real-state ?rs2)(student-state ?sel2))
    (not (state-pair (real-state ?rs1)(student-state ?sel1)))
    ?tr <- (transition (prev-state ?rs2)(next-state ?ns))
    ?spc <- (state-pair (real-state ?ns)(student-state ?ss&:(eq ?ss nil)))
    	=>
    (predict ?sel1 UpdateList ?sel2)
    (bind ?t (assert (transition (prev-state ?sel1)(next-state ?sel2))))
    (modify ?prob (curr-transitions (create$ ?ct ?t))(subGoal fill-ev-ac))
    (construct-message
    "[ What events can happen in this state? ]"
    "[ Create a transition from state" ?sel1 " to " ?sel2 ". ]"
    ))

(defrule create-transition-4
    (declare (salience 10))  
    ?prob <- (problem (ie-states $? ?ie1 $?)(curr-transitions $?ct)(subGoal ?g&:(eq ?g nil)))
    ?prob <- (problem (ie-states $? ?ie2 $?))
    (test (neq ?ie1 ?ie2))
    ?ie1 <- (interface-element (name ?sel1))
    ?ie2 <- (interface-element (name ?sel2))
    (not (state-pair (real-state ?rs1)(student-state ?sel1)))
    (not (state-pair (real-state ?rs2)(student-state ?sel2)))
    	=>
    (predict ?sel1 UpdateList ?sel2)
    (bind ?t (assert (transition (prev-state ?sel1)(next-state ?sel2))))
    (modify ?prob (curr-transitions (create$ ?ct ?t))(subGoal fill-ev-ac))
    (construct-message
    "[ What events can happen in this state? ]"
    "[ Create a transition from state" ?sel1 " to " ?sel2 ". ]"
    ))

(defrule modify-event-1
    (declare (salience 20)) ;Events should be entered before actions for hints
    ?prob <- (problem (curr-transitions $? ?t $?)(subGoal ?g&:(eq ?g fill-ev-ac)))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(event nil)) ;current transition
    ?sp1 <- (state-pair (student-state ?s1)(real-state ?rs1))
    (test (neq ?rs1 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(event ?ev))
    ?sp2 <- (state-pair (real-state ?rs2)(student-state nil))
    (not (state-pair (student-state ?s2)))
    
    	=>
    (bind ?sel (str-cat "eventFrom" ?s1 "To" ?s2))
    (predict ?sel UpdateComboBox ?ev)
    (modify ?t (event ?ev))
    (modify ?sp2 (student-state ?s2))
	(construct-message
    "[ Check the interactor -- what is happening to cause this transtion? ]"
    "[ The event is " ?ev ". ]"
    ))

(defrule modify-event-2
    (declare (salience 20)) ;Events should be entered before actions for hints
    ?prob <- (problem (curr-transitions $? ?t $?)(subGoal ?g&:(eq ?g fill-ev-ac)))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(event nil)) ;current transition
    ?sp2 <- (state-pair (student-state ?s2)(real-state ?rs2))
    (test (neq ?rs2 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(event ?ev))
    ?sp1 <- (state-pair (real-state ?rs1)(student-state nil))
    (not (state-pair (student-state ?s1)))
    
    	=>
    (bind ?sel (str-cat "eventFrom" ?s1 "To" ?s2))
    (predict ?sel UpdateComboBox ?ev)
    (modify ?t (event ?ev))
    (modify ?sp1 (student-state ?s1))
	(construct-message
    "[ Check the interactor -- what is happening to cause this transtion? ]"
    "[ The event is " ?ev ". ]"
    ))

(defrule modify-event-3
    (declare (salience 20)) ;Events should be entered before actions for hints
    ?prob <- (problem (curr-transitions $? ?t $?)(subGoal ?g&:(eq ?g fill-ev-ac)))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(event nil)) ;current transition
    ?sp1 <- (state-pair (student-state ?s1)(real-state ?rs1))
    ?sp2 <- (state-pair (student-state ?s2)(real-state ?rs2))
    (test (neq ?rs1 nil))
    (test (neq ?rs2 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(event ?ev))
    
    	=>
    (bind ?sel (str-cat "eventFrom" ?s1 "To" ?s2))
    (predict ?sel UpdateComboBox ?ev)
    (modify ?t (event ?ev))
	(construct-message
    "[ Check the interactor -- what is happening to cause this transtion? ]"
    "[ The event is " ?ev ". ]"
    ))

(defrule modify-action-1
    ?prob <- (problem (curr-transitions $? ?t $?)(subGoal ?g&:(eq ?g fill-ev-ac)))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(action nil)) ;current transition
    ?sp1 <- (state-pair (student-state ?s1)(real-state ?rs1))
    (test (neq ?rs1 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(action ?ac)(event ?ev))
    ?sp2 <- (state-pair (real-state ?rs2)(student-state nil))
    (not (state-pair (student-state ?s2)))
    
    	=>
    (bind ?sel (str-cat "actionFrom" ?s1 "To" ?s2))
    (predict ?sel UpdateComboBox ?ac)
    (modify ?t (action ?ac))
    (modify ?sp2 (student-state ?s2))
	(construct-message
    "[ Check the interactor -- what is happening when you " ?ev "? ]"
    "[ The action is " ?ac ". ]"
    ))

(defrule modify-action-2
    ?prob <- (problem (curr-transitions $? ?t $?)(subGoal ?g&:(eq ?g fill-ev-ac)))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(action nil)) ;current transition
    ?sp2 <- (state-pair (student-state ?s2)(real-state ?rs2))
    (test (neq ?rs2 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(action ?ac)(event ?ev))
    ?sp1 <- (state-pair (real-state ?rs1)(student-state nil))
    (not (state-pair (student-state ?s1)))
    
    	=>
    (bind ?sel (str-cat "actionFrom" ?s1 "To" ?s2))
    (predict ?sel UpdateComboBox ?ac)
    (modify ?t (action ?ac))
    (modify ?sp1 (student-state ?s1))
	(construct-message
    "[ Check the interactor -- what is happening when you " ?ev "? ]"
    "[ The action is " ?ac ". ]"
    ))

(defrule modify-action-3
    ?prob <- (problem (curr-transitions $? ?t $?)(subGoal ?g&:(eq ?g fill-ev-ac)))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(action nil)) ;current transition
    ?sp1 <- (state-pair (student-state ?s1)(real-state ?rs1))
    ?sp2 <- (state-pair (student-state ?s2)(real-state ?rs2))
    (test (neq ?rs1 nil))
    (test (neq ?rs2 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(action ?ac))
    
    	=>
    (bind ?sel (str-cat "actionFrom" ?s1 "To" ?s2))
    (predict ?sel UpdateComboBox ?ac)
    (modify ?t (action ?ac))
	(construct-message
    "[ Check the interactor -- what is happening to cause this transtion? ]"
    "[ The event is " ?ev ". ]"
    ))

(defrule transition-done
    ?prob <- (problem (curr-transitions $? ?t $?)(subGoal ?g&:(eq ?g fill-ev-ac))(transition-count ?tc))
    ?prob <- (problem (curr-transitions $?ct))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(event ?ev)(action ?ac)) ;current transition
    (test (and (neq ?ev nil)(neq ?ac nil)))
    	=>
    (bind ?tmp (create$ ?t))
    (bind ?nt (- ?tc 1))
    (modify ?prob (curr-transitions (complement$ ?ct ?tmp))(subGoal nil)(transition-count ?nt))
    
    )

(defrule set-end-state
    ?prob <- (problem (end-state $? ?es $?)(subGoal ?g&:(eq ?g nil)))
    ?sp <- (state-pair (real-state ?es)(student-state ?s1))
    
    	=>
    (predict ?s1 UpdateText End)
    (construct-message
    "[ Are there any transitions from this state? ]"
    "[ Set this state as an end state ]"
    ))

(defrule done
    (problem (transition-count ?tc))
    (test (eq ?tc 0))
    =>
	(predict done ButtonPressed -1)
    )