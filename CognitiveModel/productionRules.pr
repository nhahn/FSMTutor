(require* wmeTypes "wmeTypes.clp")



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  This file contains some Jess / CTAT production rules for the Mendel Backwards Problem Solving Tutor
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;--------------------------------------------------------------------------------------------
;; Functions
;;

(defrule create-state
    ?prob <- (problem (count-state ?cs)(total-state ?ts)(ie-states $? ?ie $?)(curr-states $?curr-s))
    (test (< ?cs ?ts))
    ?ie <- (interface-element (name ?sel)(value nil))
    (test (eq (member$ ?sel ?curr-s) FALSE))
    	=>
    (predict ?sel UpdateText createState)
    (modify ?prob (count-state (+ ?cs 1))(curr-states (create$ ?curr-s ?sel)))
    )

(defrule create-transition
    ?prob <- (problem (ie-states $? ?ie1 $?)(curr-transitions $?ct))
    ?prob <- (problem (ie-states $? ?ie2 $?))
    (test (neq ?ie1 ?ie2))
    ?ie1 <- (interface-element (name ?sel1))
    ?ie2 <- (interface-element (name ?sel2))
    	=>
    (predict ?sel1 UpdateList ?sel2)
    (bind ?t (assert (transition (prev-state ?sel1)(next-state ?sel2))))
    (modify ?prob (curr-transitions (create$ ?ct ?t)))
    ;(bind $?ct (insert$ $?ct ?t))
    )

(defrule modify-event-1
    ?prob <- (problem (curr-transitions $? ?t $?))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(event nil)) ;current transition
    ?sp1 <- (state-pair (student-state ?s1)(real-state ?rs1))
    (test (neq ?rs1 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(event ?ev))
    ?sp2 <- (state-pair (real-state ?rrs2))
    (test (eq ?rs2 ?rrs2))
    
    	=>
    (bind ?sel (str-cat "eventFrom" ?rs1 "To" ?rs2))
    (predict ?sel UpdateComboBox ?ev)
    (modify ?t (event ?ev))
    (modify ?sp2 (student-state ?s2))
    )

(defrule modify-event-2
    ?prob <- (problem (curr-transitions $? ?t $?))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(event nil)) ;current transition
    ?sp2 <- (state-pair (student-state ?s2)(real-state ?rs2))
    (test (neq ?rs2 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(event ?ev))
    ?sp2 <- (state-pair (real-state ?rrs1))
    (test (eq ?rs1 ?rrs1))
    
    	=>
    (bind ?sel (str-cat "eventFrom" ?rs1 "To" ?rs2))
    (predict ?sel UpdateComboBox ?ev)
    (modify ?t (event ?ev))
    (modify ?sp1 (student-state ?s1))
    )

(defrule modify-action-1
    ?prob <- (problem (curr-transitions $? ?t $?))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(action nil)) ;current transition
    ?sp1 <- (state-pair (student-state ?s1)(real-state ?rs1))
    (test (neq ?rs1 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(action ?ac))
    ?sp2 <- (state-pair (real-state ?rrs2))
    (test (eq ?rs2 ?rrs2))
    
    	=>
    (bind ?sel (str-cat "actionFrom" ?rs1 "To" ?rs2))
    (predict ?sel UpdateComboBox ?ac)
    (modify ?t (action ?ac))
    (modify ?sp2 (student-state ?s2))
    )

(defrule modify-action-2
    ?prob <- (problem (curr-transitions $? ?t $?))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(action nil)) ;current transition
    ?sp2 <- (state-pair (student-state ?s2)(real-state ?rs2))
    (test (neq ?rs2 nil))
    ?rt <- (transition (prev-state ?rs1)(next-state ?rs2)(action ?ac))
    ?sp2 <- (state-pair (real-state ?rrs1))
    (test (eq ?rs1 ?rrs1))
    
    	=>
    (bind ?sel (str-cat "actionFrom" ?rs1 "To" ?rs2))
    (predict ?sel UpdateComboBox ?ac)
    (modify ?t (action ?ac))
    (modify ?sp1 (student-state ?s1))
    )

(defrule transition-done
    ?prob <- (problem (curr-transitions $? ?t $?))
    ?t <- (transition (prev-state ?s1)(next-state ?s2)(event ?ev)(action ?ac)) ;current transition
    (test (and (neq ?ev nil)(neq ?ac nil)))
    	=>
    (modify ?t (prev-state nil)(next-state nil)(event nil)(action nil))
    
    )

(defrule set-end-state
    ?prob <- (problem (end-state ?es))
    ?sp <- (state-pair (real-state ?es)(student-state ?s1))
    
    	=>
    (predict ?s1 UpdateText End)
    )